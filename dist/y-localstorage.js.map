{"version":3,"file":"y-localstorage.js","sources":["../src/y-localstorage.ts"],"sourcesContent":["import * as Y         from 'yjs'\nimport { Observable } from 'lib0/observable'\n\nnamespace LocalStorageProvider {\n  export class LocalStorageProvider extends Observable<any> {\n    private _DocPrefix:string\n    private _sharedDoc:Y.Doc\n\n    private _UpdateCounter:number = 0\n    private _CounterLimit:number  = 5\n\n    private _pendingUpdates:number   = 0\n    private _completedUpdates:number = 0\n\n    constructor (DocName:string, sharedDoc:Y.Doc, CounterLimit:number = 5) {\n      super()\n\n      this._DocPrefix = DocName + '-'\n      this._sharedDoc = sharedDoc\n\n      this._UpdateCounter = 0        // will be updated by \"_applyStoredUpdates\"\n      this._CounterLimit  = CounterLimit\n\n      this._applyStoredUpdates()           // also updates \"this._UpdateCounter\"\n\n      this._storeUpdate = this._storeUpdate.bind(this)\n      sharedDoc.on('update', this._storeUpdate)\n\n      this.destroy = this.destroy.bind(this)\n      sharedDoc.on('destroy', this.destroy)\n    }\n\n  /**** _applyStoredUpdates - applies all stored (incremental) updates to sharedDoc ****/\n\n    _applyStoredUpdates ():void {\n      const PrefixLength = this._DocPrefix.length\n\n      const StorageKeys = this._StorageKeys()\n      if (StorageKeys.length > 0) {\n        this._pendingUpdates += StorageKeys.length; this._reportProgress()\n\n        StorageKeys.forEach((Key) => {\n          let UpdateIndex = parseInt(Key.slice(PrefixLength),10)\n          if (UpdateIndex > this._UpdateCounter) {\n            this._UpdateCounter = UpdateIndex\n          }\n\n          const Update = new Uint8Array(JSON.parse(localStorage.getItem(Key) as string))\n          Y.applyUpdate(this._sharedDoc, Update)  // can be applied in any order\n\n          this._completedUpdates++; this._reportProgress()\n        })\n      } else {\n        this._reportProgress()\n      }\n    }\n\n  /**** _storeUpdate - stores a given (incremental) update ****/\n\n    _storeUpdate (Update:Uint8Array, Origin?:any):void {\n      if (this._sharedDoc == null) { return }    // persistence no longer exists\n\n      if (Origin !== this) {          // ignore updates applied by this provider\n        this._pendingUpdates++; this._reportProgress()\n          if (this._UpdateCounter < this._CounterLimit-1) {\n            localStorage.setItem(\n              this._DocPrefix + this._UpdateCounter,\n              JSON.stringify(Array.from(Update))\n            )\n          } else {\n            this._removeStoredUpdates()\n            localStorage.setItem(\n              this._DocPrefix + this._UpdateCounter,\n              JSON.stringify(Array.from(Y.encodeStateAsUpdate(this._sharedDoc)))\n            )\n          }\n          this._UpdateCounter++\n        this._completedUpdates++; this._reportProgress()\n      }\n    }\n\n  /**** _removeStoredUpdates - removes any stored (incremental) updates ****/\n\n    _removeStoredUpdates ():void {\n      this._StorageKeys().forEach((Key) => {\n        localStorage.removeItem(Key)\n      })\n      this._UpdateCounter = 0\n    }\n\n  /**** destroy - destroys persistence, invalidates provider ****/\n\n    destroy ():void {\n      this._removeStoredUpdates()\n\n      this._sharedDoc.off('update',  this._storeUpdate)\n      this._sharedDoc.off('destroy', this.destroy)\n// @ts-ignore allow clearing of \"this._sharedDoc\"\n      this._sharedDoc = undefined\n    }\n\n  /**** isSynced - is true while this provider and its sharedDoc are in-sync ****/\n\n    get isSynced ():boolean {\n      return (this._pendingUpdates === 0)\n    }\n\n  /**** _reportProgress - emits events reporting synchronization progress ****/\n\n    _reportProgress ():void {\n      switch (true) {\n        case (this._pendingUpdates === 0):\n          this._completedUpdates = 0\n          this.emit('synced',[this])\n          break\n        case (this._completedUpdates === 0):\n          this.emit('sync-started',[this,0.0])\n          break\n        case (this._completedUpdates === this._pendingUpdates):\n          this.emit('sync-finished',[this,1.0])\n          this._pendingUpdates = this._completedUpdates = 0\n          this.emit('synced',[this])\n          break\n        default:\n          const Progress = this._completedUpdates/this._pendingUpdates\n          this.emit('sync-continued',[this,Progress])\n      }\n    }\n\n  /**** _StorageKeys - lists all keys used by this provider ****/\n\n    _StorageKeys ():string[] {\n      const PrefixLength = this._DocPrefix.length\n\n      const Result:string[] = []\n        for (let i = 0, l = localStorage.length; i < l; i++) {\n          const Key = localStorage.key(i) as string\n          if (\n            Key.startsWith(this._DocPrefix) &&\n            (/^\\d+$/.test(Key.slice(PrefixLength)) === true)\n          ) { Result.push(Key) }\n        }\n      return Result\n    }\n  }\n}\n"],"names":["LocalStorageProvider","LocalStorageProvider_1","Observable","constructor","DocName","sharedDoc","CounterLimit","super","this","_UpdateCounter","_CounterLimit","_pendingUpdates","_completedUpdates","_DocPrefix","_sharedDoc","_applyStoredUpdates","_storeUpdate","bind","on","destroy","PrefixLength","length","StorageKeys","_StorageKeys","_reportProgress","forEach","Key","UpdateIndex","parseInt","slice","Update","Uint8Array","JSON","parse","localStorage","getItem","Y","applyUpdate","Origin","setItem","stringify","Array","from","_removeStoredUpdates","encodeStateAsUpdate","removeItem","off","undefined","isSynced","emit","Progress","Result","i","l","key","startsWith","test","push"],"mappings":"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"}